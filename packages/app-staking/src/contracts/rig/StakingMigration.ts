/* Autogenerated file. Do not edit manually. */

/* eslint-disable max-classes-per-file */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/consistent-type-imports */

/*
  Fuels version: 0.98.0
*/

import { Contract, Interface } from 'fuels';
import type {
  Account,
  Address,
  BN,
  BigNumberish,
  FunctionFragment,
  InvokeFunction,
  Provider,
  StorageSlot,
} from 'fuels';

import type { Enum, Option } from './common';

export enum AccessErrorInput {
  NotOwner = 'NotOwner',
}
export enum AccessErrorOutput {
  NotOwner = 'NotOwner',
}
export type IdentityInput = Enum<{
  Address: AddressInput;
  ContractId: ContractIdInput;
}>;
export type IdentityOutput = Enum<{
  Address: AddressOutput;
  ContractId: ContractIdOutput;
}>;
export enum ReentrancyErrorInput {
  NonReentrant = 'NonReentrant',
}
export enum ReentrancyErrorOutput {
  NonReentrant = 'NonReentrant',
}
export enum StakingMigrationErrorInput {
  NoPayoutToClaim = 'NoPayoutToClaim',
  ReceivedAmountTooLow = 'ReceivedAmountTooLow',
  NotInitialized = 'NotInitialized',
  AlreadyInitialized = 'AlreadyInitialized',
  RigContractAddressNotSet = 'RigContractAddressNotSet',
  BadMigration = 'BadMigration',
  DepositDidntMintStFuel = 'DepositDidntMintStFuel',
  Overflow = 'Overflow',
}
export enum StakingMigrationErrorOutput {
  NoPayoutToClaim = 'NoPayoutToClaim',
  ReceivedAmountTooLow = 'ReceivedAmountTooLow',
  NotInitialized = 'NotInitialized',
  AlreadyInitialized = 'AlreadyInitialized',
  RigContractAddressNotSet = 'RigContractAddressNotSet',
  BadMigration = 'BadMigration',
  DepositDidntMintStFuel = 'DepositDidntMintStFuel',
  Overflow = 'Overflow',
}

export type AddressInput = { bits: string };
export type AddressOutput = AddressInput;
export type AssetIdInput = { bits: string };
export type AssetIdOutput = AssetIdInput;
export type ClaimedStFuelEventInput = {
  sender: IdentityInput;
  amount_claimed: BigNumberish;
  amount_deposited: BigNumberish;
};
export type ClaimedStFuelEventOutput = {
  sender: IdentityOutput;
  amount_claimed: BN;
  amount_deposited: BN;
};
export type ContractIdInput = { bits: string };
export type ContractIdOutput = ContractIdInput;
export type MigrationCompletedEventInput = {
  fuel_migrated: BigNumberish;
  st_fuel_received: BigNumberish;
};
export type MigrationCompletedEventOutput = {
  fuel_migrated: BN;
  st_fuel_received: BN;
};

export type StakingMigrationConfigurables = Partial<{
  L1_TOKEN_ADDRESS: string;
  L2_BRIDGE_CONTRACT: ContractIdInput;
  L2_ASSET_ID: Option<AssetIdInput>;
}>;

const abi = {
  programType: 'contract',
  specVersion: '1',
  encodingVersion: '1',
  concreteTypes: [
    {
      type: '()',
      concreteTypeId:
        '2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d',
    },
    {
      type: 'b256',
      concreteTypeId:
        '7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b',
    },
    {
      type: 'bool',
      concreteTypeId:
        'b760f44fa5965c2474a3b471467a22c43185152129295af588b022ae50b50903',
    },
    {
      type: 'enum errors::StakingMigrationError',
      concreteTypeId:
        'dd1cc1edbdfa44755660f5ea719543b1b1d42d996eb3d61a2407c70e7c22b5ed',
      metadataTypeId: 0,
    },
    {
      type: 'enum standards::src5::AccessError',
      concreteTypeId:
        '3f702ea3351c9c1ece2b84048006c8034a24cbc2bad2e740d0412b4172951d3d',
      metadataTypeId: 1,
    },
    {
      type: 'enum std::identity::Identity',
      concreteTypeId:
        'ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335',
      metadataTypeId: 2,
    },
    {
      type: 'enum std::option::Option<struct std::asset_id::AssetId>',
      concreteTypeId:
        '191bf2140761b3c5ab6c43992d162bb3dc9d7f2272b2ee5f5eeea411ddedcd32',
      metadataTypeId: 3,
      typeArguments: [
        'c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974',
      ],
    },
    {
      type: 'enum sway_libs::reentrancy::errors::ReentrancyError',
      concreteTypeId:
        '4d216c57b3357523323f59401c7355785b41bdf832f6e1106272186b94797038',
      metadataTypeId: 4,
    },
    {
      type: 'struct events::ClaimedStFuelEvent',
      concreteTypeId:
        '518ecb6a39f6d7d957123b4b84c2b678e1150b14717c2d7b8c521322f1730425',
      metadataTypeId: 6,
    },
    {
      type: 'struct events::MigrationCompletedEvent',
      concreteTypeId:
        '1f4fd727c3bfd59c4728ddf47fd5e62d59c0b18e145497ab43621156ab6da489',
      metadataTypeId: 7,
    },
    {
      type: 'struct std::asset_id::AssetId',
      concreteTypeId:
        'c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974',
      metadataTypeId: 9,
    },
    {
      type: 'struct std::contract_id::ContractId',
      concreteTypeId:
        '29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54',
      metadataTypeId: 10,
    },
    {
      type: 'u256',
      concreteTypeId:
        '1b5759d94094368cfd443019e7ca5ec4074300e544e5ea993a979f5da627261e',
    },
    {
      type: 'u64',
      concreteTypeId:
        '1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0',
    },
  ],
  metadataTypes: [
    {
      type: 'enum errors::StakingMigrationError',
      metadataTypeId: 0,
      components: [
        {
          name: 'NoPayoutToClaim',
          typeId:
            '2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d',
        },
        {
          name: 'ReceivedAmountTooLow',
          typeId:
            '2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d',
        },
        {
          name: 'NotInitialized',
          typeId:
            '2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d',
        },
        {
          name: 'AlreadyInitialized',
          typeId:
            '2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d',
        },
        {
          name: 'RigContractAddressNotSet',
          typeId:
            '2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d',
        },
        {
          name: 'BadMigration',
          typeId:
            '2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d',
        },
        {
          name: 'DepositDidntMintStFuel',
          typeId:
            '2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d',
        },
        {
          name: 'Overflow',
          typeId:
            '2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d',
        },
      ],
    },
    {
      type: 'enum standards::src5::AccessError',
      metadataTypeId: 1,
      components: [
        {
          name: 'NotOwner',
          typeId:
            '2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d',
        },
      ],
    },
    {
      type: 'enum std::identity::Identity',
      metadataTypeId: 2,
      components: [
        {
          name: 'Address',
          typeId: 8,
        },
        {
          name: 'ContractId',
          typeId: 10,
        },
      ],
    },
    {
      type: 'enum std::option::Option',
      metadataTypeId: 3,
      components: [
        {
          name: 'None',
          typeId:
            '2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d',
        },
        {
          name: 'Some',
          typeId: 5,
        },
      ],
      typeParameters: [5],
    },
    {
      type: 'enum sway_libs::reentrancy::errors::ReentrancyError',
      metadataTypeId: 4,
      components: [
        {
          name: 'NonReentrant',
          typeId:
            '2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d',
        },
      ],
    },
    {
      type: 'generic T',
      metadataTypeId: 5,
    },
    {
      type: 'struct events::ClaimedStFuelEvent',
      metadataTypeId: 6,
      components: [
        {
          name: 'sender',
          typeId: 2,
        },
        {
          name: 'amount_claimed',
          typeId:
            '1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0',
        },
        {
          name: 'amount_deposited',
          typeId:
            '1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0',
        },
      ],
    },
    {
      type: 'struct events::MigrationCompletedEvent',
      metadataTypeId: 7,
      components: [
        {
          name: 'fuel_migrated',
          typeId:
            '1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0',
        },
        {
          name: 'st_fuel_received',
          typeId:
            '1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0',
        },
      ],
    },
    {
      type: 'struct std::address::Address',
      metadataTypeId: 8,
      components: [
        {
          name: 'bits',
          typeId:
            '7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b',
        },
      ],
    },
    {
      type: 'struct std::asset_id::AssetId',
      metadataTypeId: 9,
      components: [
        {
          name: 'bits',
          typeId:
            '7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b',
        },
      ],
    },
    {
      type: 'struct std::contract_id::ContractId',
      metadataTypeId: 10,
      components: [
        {
          name: 'bits',
          typeId:
            '7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b',
        },
      ],
    },
  ],
  functions: [
    {
      inputs: [],
      name: 'claim',
      output:
        '2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d',
      attributes: [
        {
          name: 'doc-comment',
          arguments: [
            ' Claim the migrated stFUEL promised to the users for their FUEL deposits.',
          ],
        },
        {
          name: 'storage',
          arguments: ['write', 'read'],
        },
      ],
    },
    {
      inputs: [],
      name: 'get_l2_token_asset_id',
      output:
        'c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974',
      attributes: [
        {
          name: 'doc-comment',
          arguments: [' Get the l2_token asset ID.'],
        },
        {
          name: 'storage',
          arguments: ['read'],
        },
      ],
    },
    {
      inputs: [
        {
          name: 'address',
          concreteTypeId:
            'ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335',
        },
      ],
      name: 'get_pending_deposit_to_be_claimed',
      output:
        '1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0',
      attributes: [
        {
          name: 'doc-comment',
          arguments: [
            ' Get the amount of stFUEL that is pending to be claimed.',
          ],
        },
        {
          name: 'storage',
          arguments: ['read'],
        },
      ],
    },
    {
      inputs: [],
      name: 'get_rig_contract_address',
      output:
        '29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54',
      attributes: [
        {
          name: 'doc-comment',
          arguments: [' Get the Rig contract address.'],
        },
        {
          name: 'storage',
          arguments: ['read'],
        },
      ],
    },
    {
      inputs: [],
      name: 'get_st_fuel_asset_id',
      output:
        'c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974',
      attributes: [
        {
          name: 'doc-comment',
          arguments: [' Get the stFUEL asset ID.'],
        },
        {
          name: 'storage',
          arguments: ['read'],
        },
      ],
    },
    {
      inputs: [],
      name: 'get_st_fuel_to_fuel_ratio',
      output:
        '1b5759d94094368cfd443019e7ca5ec4074300e544e5ea993a979f5da627261e',
      attributes: [
        {
          name: 'doc-comment',
          arguments: [' Get the stFUEL to FUEL ratio.'],
        },
        {
          name: 'storage',
          arguments: ['read'],
        },
      ],
    },
    {
      inputs: [
        {
          name: 'stfuel_asset_id',
          concreteTypeId:
            'c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974',
        },
        {
          name: 'rig_contract_address',
          concreteTypeId:
            '29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54',
        },
        {
          name: 'min_st_fuel_received',
          concreteTypeId:
            '1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0',
        },
      ],
      name: 'initial_setup',
      output:
        '2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d',
      attributes: [
        {
          name: 'doc-comment',
          arguments: [
            ' --------------- StakingMigration FUNCTIONS --------------- ///',
          ],
        },
        {
          name: 'storage',
          arguments: ['read', 'write'],
        },
      ],
    },
    {
      inputs: [],
      name: 'is_initialized',
      output:
        'b760f44fa5965c2474a3b471467a22c43185152129295af588b022ae50b50903',
      attributes: [
        {
          name: 'doc-comment',
          arguments: [' Get the migration data.'],
        },
        {
          name: 'storage',
          arguments: ['read'],
        },
      ],
    },
  ],
  loggedTypes: [
    {
      logId: '5557842539076482339',
      concreteTypeId:
        '4d216c57b3357523323f59401c7355785b41bdf832f6e1106272186b94797038',
    },
    {
      logId: '15932822808568677493',
      concreteTypeId:
        'dd1cc1edbdfa44755660f5ea719543b1b1d42d996eb3d61a2407c70e7c22b5ed',
    },
    {
      logId: '5876858220864526297',
      concreteTypeId:
        '518ecb6a39f6d7d957123b4b84c2b678e1150b14717c2d7b8c521322f1730425',
    },
    {
      logId: '4571204900286667806',
      concreteTypeId:
        '3f702ea3351c9c1ece2b84048006c8034a24cbc2bad2e740d0412b4172951d3d',
    },
    {
      logId: '2256258504123733404',
      concreteTypeId:
        '1f4fd727c3bfd59c4728ddf47fd5e62d59c0b18e145497ab43621156ab6da489',
    },
  ],
  messagesTypes: [],
  configurables: [
    {
      name: 'L1_TOKEN_ADDRESS',
      concreteTypeId:
        '7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b',
      offset: 28808,
    },
    {
      name: 'L2_BRIDGE_CONTRACT',
      concreteTypeId:
        '29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54',
      offset: 28880,
    },
    {
      name: 'L2_ASSET_ID',
      concreteTypeId:
        '191bf2140761b3c5ab6c43992d162bb3dc9d7f2272b2ee5f5eeea411ddedcd32',
      offset: 28840,
    },
  ],
};

const storageSlots: StorageSlot[] = [
  {
    key: '5810e30d3321a24cc30d39ac20f6a71fa17d1fff3270326c1d90d42dafaf575c',
    value: '0000000000000000000000000000000000000000000000000000000000000000',
  },
  {
    key: '833cd31231e9b5034448aa17456d99cb47ab2c77f77490e8185526133e8633b9',
    value: '0000000000000000000000000000000000000000000000000000000000000000',
  },
  {
    key: '84fa7b60b45b84855ce19c5437342e739b0b3c5526aec87d86ccfa5b2668a132',
    value: '0000000000000000000000000000000000000000000000000000000000000000',
  },
  {
    key: 'aafc85f559ca02b43ae5cfe7f8007220a3cf08dbb43201b93e2945f1a98585c8',
    value: '0000000000000000000000000000000000000000000000000000000000000000',
  },
  {
    key: 'b012c5369d310e613131a9f9af20bf5777f063a6565b6792a88ca4e29f89b8f8',
    value: '0000000000000000000000000000000000000000000000000000000000000000',
  },
  {
    key: 'cca2064d66e531b0f2892e3b2ff7be573d1edfb29b8b7bfaac60843a6d1ddeda',
    value: '0000000000000000000000000000000000000000000000000000000000000000',
  },
  {
    key: 'd610f70fb93eee5859bf207c491c41990c769179985f1a884d53919ad2f5b7b7',
    value: '0000000000000000000000000000000000000000000000000000000000000000',
  },
  {
    key: 'ec51fa256ec4cab904819af72be16f43d5b84b17e02be99fe90c5551cb85322d',
    value: '0000000000000000000000000000000000000000000000000000000000000000',
  },
];

export class StakingMigrationInterface extends Interface {
  constructor() {
    super(abi);
  }

  declare functions: {
    claim: FunctionFragment;
    get_l2_token_asset_id: FunctionFragment;
    get_pending_deposit_to_be_claimed: FunctionFragment;
    get_rig_contract_address: FunctionFragment;
    get_st_fuel_asset_id: FunctionFragment;
    get_st_fuel_to_fuel_ratio: FunctionFragment;
    initial_setup: FunctionFragment;
    is_initialized: FunctionFragment;
  };
}

export class StakingMigration extends Contract {
  static readonly abi = abi;
  static readonly storageSlots = storageSlots;

  declare interface: StakingMigrationInterface;
  declare functions: {
    claim: InvokeFunction<[], void>;
    get_l2_token_asset_id: InvokeFunction<[], AssetIdOutput>;
    get_pending_deposit_to_be_claimed: InvokeFunction<
      [address: IdentityInput],
      BN
    >;
    get_rig_contract_address: InvokeFunction<[], ContractIdOutput>;
    get_st_fuel_asset_id: InvokeFunction<[], AssetIdOutput>;
    get_st_fuel_to_fuel_ratio: InvokeFunction<[], BN>;
    initial_setup: InvokeFunction<
      [
        stfuel_asset_id: AssetIdInput,
        rig_contract_address: ContractIdInput,
        min_st_fuel_received: BigNumberish,
      ],
      void
    >;
    is_initialized: InvokeFunction<[], boolean>;
  };

  constructor(id: string | Address, accountOrProvider: Account | Provider) {
    super(id, abi, accountOrProvider);
  }
}
