schema {
  query: Query
}

# --------------------------------
# Balances
# --------------------------------

type UtxoItem {
  amount: U64!
  blockCreated: U32
  txCreatedIdx: U64
  utxoId: UtxoId!
}

type Balance {
  utxos: [UtxoItem]
}

# --------------------------------
# Blocks
# --------------------------------

type Block {
  _id: Int
  time: ParsedTime
  totalGasUsed: U64
  totalFee: U64
  producer: Address
}

# --------------------------------
# GroupedInputs
# --------------------------------

type GroupedInputCoin {
  type: GroupedInputType
  assetId: AssetId
  inputs: [Input!]
  owner: Address
  totalAmount: U64
}

type GroupedInputContract {
  type: GroupedInputType
  contractId: ContractId
  inputs: [Input!]
}

type GroupedInputMessage {
  type: GroupedInputType
  data: HexString
  inputs: [Input!]
  recipient: Address
  sender: Address
}

enum GroupedInputType {
  InputCoin
  InputContract
  InputMessage
}

union GroupedInput =
  | GroupedInputCoin
  | GroupedInputContract
  | GroupedInputMessage

# --------------------------------
# GroupedOutputs
# --------------------------------

type GroupedOutputCoin {
  type: GroupedOutputType
  assetId: AssetId
  outputs: [Output]
  to: Address
  totalAmount: U64
}

type GroupedOutputChanged {
  type: GroupedOutputType
  assetId: AssetId
  outputs: [Output]
  to: Address
  totalAmount: U64
}

type GroupedOutputContractCreated {
  type: GroupedOutputType
  contractId: ContractId
  outputs: [Output]
}

enum GroupedOutputType {
  OutputCoin
  OutputChanged
  OutputContractCreated
}

union GroupedOutput =
  | GroupedOutputCoin
  | GroupedOutputChanged
  | GroupedOutputContractCreated

# --------------------------------
# Operations
# --------------------------------

input OperationsFilterInput {
  transactionHash: String!
}

enum OperationType {
  FROM_CONTRACT
  FROM_ACCOUNT
  FINAL_RESULT
  ROOTLESS
}

type OperationReceipt {
  item: Receipt
  receipts: [OperationReceipt!]
}

type Operation {
  _id: String
  type: OperationType
  receipts: [OperationReceipt!]
}

# --------------------------------
# Transaction
# --------------------------------

type ParsedTime {
  fromNow: String
  full: String
  rawTai64: String
  rawUnix: String
}

type TransactionGasCosts {
  gasUsed: U64
  fee: U64
  feeInUsd: String
}

extend type Transaction {
  _id: String
  blockHeight: U32
  gasCosts: TransactionGasCosts
  groupedInputs: [GroupedInput!]!
  groupedOutputs: [GroupedOutput!]!
  hasPredicate: Boolean
  operations: [Operation!]
  receipts: [Receipt!]
  statusType: String
  time: ParsedTime!
  title: String!
  mintedAsset: Asset
}

# --------------------------------
# Contract
# --------------------------------

type Contract {
  _id: Int
}

type ContractConnection {
  nodes: [Contract]
  pageInfo: PageInfo!
}

# --------------------------------
# Predicate
# --------------------------------

type PredicateItem {
  address: Address
  bytecode: String
}

# --------------------------------
# Search
# --------------------------------

type SearchAccount {
  address: Address
  transactions: [SearchTransaction]
}

type SearchContract {
  id: ContractId
}

type SearchBlock {
  id: BlockId
  height: String
}

type SearchTransaction {
  id: TransactionId
}

type SearchResult {
  account: SearchAccount
  block: SearchBlock
  contract: SearchContract
  transaction: SearchTransaction
}

# --------------------------------
# Query
# -------------------------------

type Query {
  contracts(
    after: String
    before: String
    first: Int
    last: Int
  ): ContractConnection!
  search(query: String!): SearchResult
  predicate(address: String!): PredicateItem
  tps: TPSConnection!
  statistics: StatisticsConnection!
  getBlocksDashboard: BlocksDashboardConnection!
  asset(assetId: String!): Asset
  assetsByContract(
    contractId: String!
    after: String
    before: String
    first: Int
    last: Int
  ): AssetsContractConnection!
  balanceByBlockHeight(
    assetId: AssetId!
    accountHash: Address!
    blockHeight: Int
  ): BalanceByBlockHeight
}

type BalanceByBlockHeight {
  assetId: AssetId
  accountHash: Address
  blockHeight: Int
  balance: String
  balanceInUsd: String
}

type AssetsContractConnection {
  nodes: [Asset!]!
  pageInfo: PageInfo!
}

type TPS {
  start: String
  end: String
  txCount: U64!
  totalGas: U64!
}

type TPSConnection {
  nodes: [TPS!]!
}

type Statistics {
  totalTps: [StatisticsDetails]
  averageTps: [StatisticsDetails]
  maxTps: [StatisticsDetails]
  totalGasUsed: [StatisticsDetails]
  averageGasUsed: [StatisticsDetails]
  maxGasUsed: [StatisticsDetails]
  totalFee: [StatisticsTotalFeeDetails]
  totalFee24hrs: String
}

type StatisticsDetails {
  date: String
  value: U64
}

type StatisticsTotalFeeDetails {
  date: String
  value: U64
  valueInUsd: String
}

type StatisticsConnection {
  nodes: Statistics
}

type BlocksDashboard {
  timestamp: U64!
  gasUsed: U64!
  gasUsedInUsd: String
  totalFee: U64!
  totalFeeInUsd: String
  blockNo: U64!
  producer: String
  blockHash: String
}

type BlocksDashboardConnection {
  nodes: [BlocksDashboard!]!
}

type Asset {
  assetId: String
  contractId: String
  subId: String
  name: String
  symbol: String
  decimals: U64
  icon: String
  verified: Boolean
  suspicious: Boolean
  networks: [AssetNetwork]
  rate: U64
}

union AssetNetwork = AssetNetworkFuel | AssetNetworkEthereum

type AssetNetworkFuel {
  type: String
  decimals: U64
  assetId: String
  contractId: String
  chainId: U64
}

type AssetNetworkEthereum {
  type: String
  decimals: U64
  address: String
}

type ContractBalance2 {
  assetId: String
  amount: U64
  asset: Asset
}
